//Breathe Red, Breathe Blue, Delay at max color, switch color.

#include <Adafruit_NeoPixel.h>

const uint8_t gamma1[] PROGMEM = { // Gamma correction table for LED brightness
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,
    2,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  4,  5,  5,  5,
    5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9, 10,
   10, 10, 11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16,
   17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 24, 24, 25,
   25, 26, 27, 27, 28, 29, 29, 30, 31, 32, 32, 33, 34, 35, 35, 36,
   37, 38, 39, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 50,
   51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68,
   69, 70, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 85, 86, 87, 89,
   90, 92, 93, 95, 96, 98, 99,101,102,104,105,107,109,110,112,114,
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

// LEDs go around the full perimeter of the shoe sole, but the step animation
// is mirrored on both the inside and outside faces, while the strip doesn't
// necessarily start and end at the heel or toe.  These constants help configure
// the strip and shoe sizes, and the positions of the front- and rear-most LEDs.
// Becky's shoes: 39 LEDs total, 20 LEDs long, LED #5 at back.
// Phil's shoes: 43 LEDs total, 22 LEDs long, LED #6 at back.
#define N_LEDS        43 // TOTAL number of LEDs in strip
#define SHOE_LEN_LEDS 23 // Number of LEDs down ONE SIDE of shoe
#define SHOE_LED_BACK  1 // Index of REAR-MOST LED on shoe
#define PRESSURE_PIN   2 // Analog input for footstep
#define VIBE_PIN       0 //Input for vibration sensor
#define LED_PIN        1 // NeoPixel strip is connected here
#define MAXSTEPS       3 // Process (up to) this many concurrent steps

Adafruit_NeoPixel strip = Adafruit_NeoPixel(N_LEDS, LED_PIN, NEO_GRB + NEO_KHZ800);

// The readings from the sensors are usually around 250-350 when not being pressed,
// then dip below 100 when the heel is standing on it (for Phil's shoes; Becky's
// don't dip quite as low because she's smaller).
#define STEP_TRIGGER    100  // Reading must be above this to trigger step
#define STEP_HYSTERESIS 90  // After trigger, must return to this level

int
  stepMag[MAXSTEPS],  // Magnitude of steps
  stepX[MAXSTEPS],    // Position of 'step wave' along strip
  mag[SHOE_LEN_LEDS], // Brightness buffer (one side of shoe)
  stepFiltered,       // Current filtered pressure reading
  stepCount,          // Number of 'frames' current step has lasted
  stepMin;            // Minimum reading during current step
uint8_t
  stepNum = 0,        // Current step number in stepMag/stepX tables
  dup[SHOE_LEN_LEDS]; // Inside/outside copy indexes
boolean
  stepping  = false;  // If set, step was triggered, waiting to release
  //debug = false;      // we'll set to  true  below in order to get analog readout :+1:

void setup() {
  Serial.begin(9600);
  //pinMode(VIBE_PIN,INPUT);
  pinMode(2, INPUT_PULLUP); // Set internal pullup resistor for sensor pin
  // As previously mentioned, the step animation is mirrored on the inside and
  // outside faces of the shoe.  To avoid a bunch of math and offsets later, the
  // 'dup' array indicates where each pixel on the outside face of the shoe should
  // be copied on the inside.  (255 = don't copy, as on front- or rear-most LEDs).
  // Later, the colors for the outside face of the shoe are calculated and then get
  // copied to the appropriate positions on the inside face.
  memset(dup, 255, sizeof(dup));
  int8_t a, b;
  for(a=1              , b=SHOE_LED_BACK-1            ; b>=0    ;) dup[a++] = b--;
  for(a=SHOE_LEN_LEDS-2, b=SHOE_LED_BACK+SHOE_LEN_LEDS; b<N_LEDS;) dup[a--] = b++;

  // Clear step magnitude and position buffers
  memset(stepMag, 0, sizeof(stepMag));
  memset(stepX  , 0, sizeof(stepX));
  strip.begin();
  strip.show();

  
  Serial.print("pressure_sensor = ");
  stepFiltered = analogRead(PRESSURE_PIN); // Initial input
  Serial.println(stepFiltered);
}


//set debug here; true if you want sensor readout
//debug = true;


void loop() {
  uint8_t j = 1;
  uint8_t m = 1;
  uint8_t n = 1;
  boolean bFlip = false;
  for (;;) {
    strip.begin();
    strip.clear();
      for (int i = 0; i <= 64; i = i + 1) {
        strip.setPixelColor(i, m, j, n);
      }
    strip.show();
////RED BREATHE, THEN FLIP TO BLUE
    if ( bFlip == false ) {
      if ( m < 50 ) {
        m = 50;
      } else {
        m++;
        delay(8);
        if ( m == 255 ) {
          m = 1;
          bFlip = true;
        }
      }
    }
////BLUE BREATHE, THEN FLIP BACK TO RED
    if ( bFlip == true ) {
      if ( n < 50 ) {
        n = 50;
      } else {
        n++;
        delay(8);
        if ( n == 255 ) {
          n = 1;
          bFlip = false;
        }
      }
    }
    
    
//GREEN //SOLID   
//LED logic here 
//    j++;
//    if ( j >= 245 ) {
//      delay(800);
//    }
//    else {
//    delay(6);
//    }

  //close infinite for block
  }
//close loop()  
}




